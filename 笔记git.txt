###########################################################################################################################
如何测试embed_tool
1、先清空shadow目录和远端mysql中的数据库
2、启动proxy，调用测试脚本，生成shadow目录
3、把【1】中的aaa目录清空，scp拷贝shadow过去，导出aaa.sql文件。
4、导出xml文件，清空shadow_2，导入shadow_2
5、把【1】中的aaa目录清空，scp拷贝shadow过去，导出bbb.sql文件。
6、对照一把sql文件
7、使用shadow进行测试
8、然后再使用shadow_2测试
	

###########################################################################################################################
密码学有关
密码学6个重要工具：对称密码、公钥密码、单向散列函数、消息认证码、数字签名和伪随机数生成器


###########################################################################################################################
kms密钥管理服务器
1、kms是密钥管理服务器，需要向kms获取密钥，是否支持用户设置？
2、要向kms获取密钥，需要一组参数，这组参数确定密钥
3、客户端和kms交互，需要会话密钥，这就涉及密钥配送的问题，解决这个问题，使用公钥密码，向服务端请求公钥。
4、客户端请求，使用服务端的公钥SM2，对会话密钥加密。
5、考虑到会话密钥的


3、获取过程是经过网络的，如果请求是明文，第三方可以截取到，存在风险。
4、怎么解决？
	客户端的请求要加密，服务端先传一个公钥。
5、服务端传输的密钥，也需要加密
	需要客户端传输密钥
6、
	

###########################################################################################################################
重要的错误
安装sudo apt install libmysqld-dev
导致assert(0 == mysql_thread_init());//初始化线程环境，断言失败



###########################################################################################################################
同时生成静态库和动态库



###########################################################################################################################
merge
1、如果没有分叉，从dev合并，就是 Fast-forward
2、本地合并，存在冲突。
	
###########################################################################################################################
origin
1、origin是个远程地址，通过下面的语句可以看到
	root@ubuntu:/home/disk1/GitTest# git remote -v
	origin  https://github.com/nzbbody/GitTest (fetch)
	origin  https://github.com/nzbbody/GitTest (push)


###########################################################################################################################
加密模式的区别
1、SENSITIVE等级最高，BEST_EFFORT相对于SENSITIVE，只是多了一个洋葱，支持剥到明文，PLAIN就是明文。
2、BEST_EFFORT和SENSITIVE，会根据实际需要配置洋葱层，在使用的过程中，为了支持，会剥掉洋葱。





###########################################################################################################################
DETJOINFactory 和 DETFactory 什么区别？
std::unique_ptr<EncLayer>
DETFactory::create(const Create_field &cf, const std::string &key)
{
    if (isMySQLTypeNumeric(cf)) {
        if (cf.sql_type == MYSQL_TYPE_DECIMAL
            || cf.sql_type == MYSQL_TYPE_NEWDECIMAL) {
            FAIL_TextMessageError("decimal support is broken");
        } else {
            return std::unique_ptr<EncLayer>(new DET_int(cf, key));
        }
    } else {
        return std::unique_ptr<EncLayer>(new DET_str(cf, key));
    }
}

std::unique_ptr<EncLayer>
DETFactory::deserialize(unsigned int id, const SerialLayer &sl)
{
    if ("DET_int" == sl.name) {
        return DET_abstract_integer::deserialize<DET_int>(id,
                                                       sl.layer_info);
    } else if ("DET_dec" == sl.name) {
        FAIL_TextMessageError("decimal support broken");
    } else if ("DET_str" == sl.name) {
        return std::unique_ptr<EncLayer>(new DET_str(id, sl.layer_info));
    } else {
        FAIL_TextMessageError("Unknown type for DET deserialization!");
    }
}


###########################################################################################################################
OPE剥洋葱的细节
1、varbinary当成varchar使用
2、RND剥洋葱涉及到salt，其它的剥洋葱不涉及
3、由于加上了OPEJOIN，也就是 【【【OPEJOIN】OPE】RND】
	这就要剥洋葱 OPE， RND剥掉之后，就需要剥掉OPE，秘钥不同
4、为什么不需要 OPE_str::decryptUDF ？
	static onionlayout STR_ONION_LAYOUT = 
	{
    {oDET, std::vector<SECLEVEL>({SECLEVEL::DETJOIN, SECLEVEL::DET,
                                  SECLEVEL::RND})},
    {oOPE, std::vector<SECLEVEL>({SECLEVEL::OPEJOIN, SECLEVEL::OPE, SECLEVEL::RND})},
    {oSWP, std::vector<SECLEVEL>({SECLEVEL::SEARCH})}
    // {oSWP, std::vector<SECLEVEL>({SECLEVEL::PLAINVAL, SECLEVEL::DET,
                                  // SECLEVEL::RND})}
	};
	因为string的OPE是 {oOPE, std::vector<SECLEVEL>({SECLEVEL::OPEJOIN, SECLEVEL::OPE, SECLEVEL::RND})},
	string--OPEJOIN-->int--OPE-->int， 这里的OPE是对int处理，所以剥掉的也是OPE_int
5、对于string的OPE操作，只能比较前面4个字节，为什么？
	因为OPE算法只对前面4个字节，加密，加密的结果是 varbinary(32), 32个字节。
6、为什么只对前面4个字节加密？
	因为string的长度是不确定的，没有办法支持加密后的结果进行OPE比较。
7、为什么对前面4个字节加密，select出来的结果，是完整的？
	因为select的是eq这个洋葱，作为判断使用的是ope洋葱。
###########################################################################################################################	
mysql的varbinary
1、select出来varbinary看到的值不是字节的值，而是字节的ASCCI值。如下：
	CREATE TABLE test1 (c1 VARBINARY(3));
	INSERT INTO test1 set c1 = 0x61;
	mysql> select c1 from test1;
	+----+
	| c1 |
	+----+
	| a  |
	+----+
	1 row in set
2、再添加一个记录，如下：
	mysql> INSERT INTO test1 set c1 = 0x31;
	Query OK, 1 row affected
	
	mysql> select c1 from test1;
	+----+
	| c1 |
	+----+
	| a  |
	| 1  |
	+----+
	2 rows in set
	注意：这里的1是ASCCI值，取值为49
###########################################################################################################################
快捷键
1、word的F4，重复上一步操作
2、excel中 Ctrl+E 操作


###########################################################################################################################
cmake自动生成目录lib
1、对于下面的命令，cmake自动生成目录lib
	SET(LIBRARY_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/lib)


###########################################################################################################################	
思考洋葱的流程
1、考虑 select * from grade1 where chn > math; 流程是什么？
2、通过抓包发现，上面的sql语句重写为
	select `yytest`.`table_RINDNVZYLV`.`RQDCHMVSRGoEq`,`yytest`.`table_RINDNVZYLV`.`cdb_saltSTCMIHZRPQ`,`yytest`.`table_RINDNVZYLV`.`MDSBNIFRBHoEq`,`yytest`.`table_RINDNVZYLV`.`BVGEQNNIUDoEq`,`yytest`.`table_RINDNVZYLV`.`JBECZAOQOGoEq`,`yytest`.`table_RINDNVZYLV`.`cdb_saltWMPCQHRDPL` from `yytest`.`table_RINDNVZYLV` where (`yytest`.`table_RINDNVZYLV`.`MRTWUKQORQoOrder` > `yytest`.`table_RINDNVZYLV`.`GCLJSYADDKoOrder`)
3、我先思考，如果是自己做，思路是什么？
	a、要把*转化为对应的字段，一个字段扩展为多个洋葱，我使用哪一个洋葱呢？
		要选用加密过程没有信息丢失的洋葱，也就是说，可以解密的。OPE加密就会信息丢失，对于string只取前面4个字节。
		因此，这里选用eq洋葱，把*转化为每个字段的eq洋葱，因为解密还涉及到盐值，所以要select盐值字段。
	b、chn > math 涉及到两个洋葱比较，大于号决定了使用OPE洋葱，chn和math使用对应的OPE洋葱，而且要剥掉RND，OPE，到了OPE_JOIN这一层，密钥相同，就可以比较了。
		能否支持 chn > math，需要考虑哪个洋葱，以及洋葱的最里层。如下：
		const EncSet EQ_EncSet = 
		{
			{
				{oPLAIN, LevelFieldPair(SECLEVEL::PLAINVAL, NULL)},
				{oDET,   LevelFieldPair(SECLEVEL::DET, NULL)},
				{oOPE,   LevelFieldPair(SECLEVEL::OPE, NULL)},
			}
		};
		
		const EncSet JOIN_EncSet = 
		{
			{
				{oPLAIN, LevelFieldPair(SECLEVEL::PLAINVAL, NULL)},
				{oDET,   LevelFieldPair(SECLEVEL::DETJOIN, NULL)},
			}
		};
		上面是初始化的洋葱集合，以及每个洋葱的最里层。
	c、select是eq洋葱，select回来的结果，也要使用eq洋葱解密。



###########################################################################################################################
【ModernCPP_01】理解模板型别推导
1、示例代码如下：
	template<typename T>
	void f(ParamType param);
	
	f(expr);
2、先增加打印类型的代码，如下：
	#include <string>
	#include <type_traits>
	#include <typeinfo>
	#ifndef _MSC_VER
	# include <cxxabi.h>
	#endif
	#include <memory>
	#include <string>
	#include <cstdlib>	
	
	template <class T>
	std::string type_name()
	{
		typedef typename std::remove_reference<T>::type TR;
		std::unique_ptr<char, void(*)(void*)> own
			(
	#ifndef _MSC_VER
			abi::__cxa_demangle(typeid(TR).name(), nullptr,
			nullptr, nullptr),
	#else
			nullptr,
	#endif
			std::free
			);
	
		std::string r;
		if (std::is_const<TR>::value)
		{
			r +="const ";
		}		
		if (std::is_volatile<TR>::value)
		{
			r +="volatile ";
		}
		r += (own!= nullptr? own.get() : typeid(TR).name());
		if (std::is_lvalue_reference<T>::value)
		{
			r +="&";
		}
		if (std::is_rvalue_reference<T>::value)
		{
			r +="&&";
		}
	
		return r;
	}
3、考虑第一种情况，ParamType是个指针或者引用，但不是万能引用
	a、若expr具有引用型别，现将引用部分去掉
	b、然后，对expr和ParamType的型别执行模式匹配，来决定T的型别


###########################################################################################################################
CItemMath_One和CItemStrconv




###########################################################################################################################
template<class CB>
ope_domain_range
OPE::search(CB go_low)
{
    blockrng<AES> r(aesk);
/*
    return lazy_sample(to_ZZ(0), to_ZZ(1) << pbits,
                       to_ZZ(0), to_ZZ(1) << cbits,
                       go_low, &r);
                      */

   return lazy_sample(-(to_ZZ(1) << (pbits - 1)), to_ZZ(1) << pbits,
                       to_ZZ(0), to_ZZ(1) << cbits,
                       go_low, &r);

}
导致ope_join测试用例失败

###########################################################################################################################
su与sudo的再次理解



###########################################################################################################################
有一个重大的问题如下：

update导致其他的字段，发生变化，需要修改一下，先记录一下。
mysql> select * from warehouse;                       
+------+-----------+----------------+--------------+--------------+---------+-----------+-------+-------+
| w_id | w_name    | w_street_1     | w_street_2   | w_city       | w_state | w_zip     | w_tax | w_ytd |
+------+-----------+----------------+--------------+--------------+---------+-----------+-------+-------+
| 1    | 3WAf6foT8 | OxjIRCUDCbPSiC | fjVVJ7ZoHCsw | L3Vj0E0PQUcb | 03      | 617966913 | 0.12  | 12    |
+------+-----------+----------------+--------------+--------------+---------+-----------+-------+-------+
1 row in set (0.01 sec)

mysql> UPDATE warehouse SET w_ytd = 6 WHERE w_id = 1;        
Query OK, 1 row affected (0.00 sec)

mysql> select * from warehouse;                      
+------+-----------+----------------+--------------+--------------+---------+-----------+-------+-------+
| w_id | w_name    | w_street_1     | w_street_2   | w_city       | w_state | w_zip     | w_tax | w_ytd |
+------+-----------+----------------+--------------+--------------+---------+-----------+-------+-------+
| 1    | 3WAf6foT8 | OxjIRCUDCbPSiC | fjVVJ7ZoHCsw | L3Vj0E0PQUcb | 03      | 617966913 | 0.12  | 6     |
+------+-----------+----------------+--------------+--------------+---------+-----------+-------+-------+
1 row in set (0.01 sec)

mysql> UPDATE warehouse SET w_ytd = w_ytd + 6 WHERE w_id = 1;
Query OK, 1 row affected (0.03 sec)

mysql> select * from warehouse;                              
+------+-----------+----------------+--------------+--------------+---------+-----------+-------+-------+
| w_id | w_name    | w_street_1     | w_street_2   | w_city       | w_state | w_zip     | w_tax | w_ytd |
+------+-----------+----------------+--------------+--------------+---------+-----------+-------+-------+
| 1    | 3WAf6foT8 | OxjIRCUDCbPSiC | fjVVJ7ZoHCsw | L3Vj0E0PQUcb | 03      | 617966913 | 0.00  | 12    |
+------+-----------+----------------+--------------+--------------+---------+-----------+-------+-------+
1 row in set (0.01 sec)

w_ytd = w_ytd + 6 导致错误，需要找一下问题。
w_tax是 float存在问题，如果是int没有问题，

那我现在怎么做？
先把w_tax 不加密，来测试一把。也不行

w_ytd = 300000.00; 是写死的，因此，我使用 SET w_ytd = 6 这种方式，来设置。

INSERT INTO history(h_c_d_id, h_c_w_id, h_c_id, h_d_id, h_w_id, h_date, h_amount, h_data) VALUES(3, 1, 2, 1, 1, '2018-07-04 22:13:07', 3385.000000, '.\').....Q.#07000Error: Bad Query: [INSERT INTO history(h_c_d_id, h_c_w_id, h_c_id, h_d_id, h_w_id, h_date, h_amount, h_data) VALUES(3, 1, 2, 1, 1, '2018-07-04 22:13:07', 3385.000000, '.\')]
	Line 1736: Error Data: parse_sql


###########################################################################################################################
批量修改图片的属性
1、全选所有图片：开始－－编辑－－查找和选择－－定位条件，点选“对象”，确定；
2、右击任一图片，大小和属性，属性选项卡，点选“对象位置”中“大小和位置随单元格而变”。


###########################################################################################################################
验证流程：
1、每个测试结果点击一下，看看是否有图片显示不对。
2、修改的代码好好检查，commit，添加详细支持的log
3、自动化跑一遍
4、push代码
5、提交 FunctionTest，添加详细的log

###########################################################################################################################
配置runner ci
https://note.youdao.com/group/#/65827312/(full:pdf/201146002)




###########################################################################################################################
内存泄漏的代码好好整理一下



###########################################################################################################################
proxy failed to retrieve default database 这个问题，稍微处理一下

操作步骤
1、return tpcc注释掉，vi ../sqlhandler/rewrite/src/rewrite_util.cc 837行
2、调用rebuild_clear_all.sh
3、开启flkcdp，创建数据库 tpcc，然后关闭
4、直接return tpcc，true，然后 sudo make install
5、flkcdp >/dev/null 2>&1 
6、调用 test_load_flkcdp.sh


############################################################################################################################
1、熟练使用linux系统命令，熟悉Linux系统平台软件开发，具备Linux平台下C/C++/Python程序开发经验；
2、熟练使用C/C++，熟练掌握数据结构和算法、熟悉STL；
3、熟悉Mysql等关系型数据库产品，精通SQL语言，有数据库优化经验，优先考虑；
4、熟悉加密算法，优先考虑；
5、有良好的编码习惯，和编写高性能代码的意识；
6、具备良好的沟通技巧及团队合作精神，有工作热情，有较好的理解能力和学习能力。
############################################################################################################################





############################################################################################################################
create table staff(id int, name enc varchar(64), height enc float, weight enc float, basepay enc float, meritpay enc float, des enc varchar(128));
insert into staff value(1,"滕海明",178.5,176.25,1000.50,200.35,"I am Frank, hello");
insert into staff value(2,"陈明",170.5,150.25,900.15,310.45,"我叫陈明, 我来自上海");
insert into staff value(3,"杨万年",171.5,155.25,984.15,264.45,"我是杨万年，我是安徽人，hello");
insert into staff value(4,"刘新超",172.25,165.25,635.15,561.45,"大家好，我是刘新超");
insert into staff value(5,"钟倩",162.5,100.25,844.15,190.45,"我是钟倩，九零后");
insert into staff value(6,"倪飞",173.25,163.25,987.15,256.45,"我叫倪飞，我是安徽人");
insert into staff value(7,"牛自宾",175.5,170.25,810.15,315.45,"我是牛自宾，我来自安徽");

create database aaa;
use aaa;
create table a1(id int);
insert into a1 value(1),(2);

drop database aaa;
create database bbb;
use bbb;
create table b1(id int);
insert into b1 value(1),(2);


create database flktest;
use flktest;
create table staff(id int, name varchar(64));
insert into staff value(1,"Andy");


W0801 01:04:21.205687  6951 insert_handler.cc:48] [20180801 01:04:21.205687]aaaaa InsertHandler 150
W0801 01:04:21.205691  6951 Analysis.cc:901] [20180801 01:04:21.205690]aaaaa InsertHandler 151
W0801 01:04:21.205695  6951 Analysis.cc:915] [20180801 01:04:21.205695]aaaaa InsertHandler 1510
W0801 01:04:21.205708  6951 Analysis.cc:927] [20180801 01:04:21.205706]aaaaa InsertHandler 1511
W0801 01:04:21.205713  6951 Analysis.cc:931] [20180801 01:04:21.205711]aaaaa InsertHandler 1512
W0801 01:04:21.205715  6951 Analysis.cc:903] [20180801 01:04:21.205715]aaaaa InsertHandler 152
W0801 01:04:21.205724  6951 Analysis.cc:907] [20180801 01:04:21.205723]aaaaa InsertHandler 153
W0801 01:04:21.205729  6951 insert_handler.cc:56] [20180801 01:04:21.205727]aaaaa InsertHandler 200


W0801 01:04:50.933387  6951 insert_handler.cc:48] [20180801 01:04:50.933385]aaaaa InsertHandler 150
W0801 01:04:50.933389  6951 Analysis.cc:901] [20180801 01:04:50.933389]aaaaa InsertHandler 151
W0801 01:04:50.933393  6951 Analysis.cc:915] [20180801 01:04:50.933393]aaaaa InsertHandler 1510
W0801 01:04:50.933403  6951 Analysis.cc:927] [20180801 01:04:50.933403]aaaaa InsertHandler 1511
W0801 01:04:50.933408  6951 Analysis.cc:931] [20180801 01:04:50.933408]aaaaa InsertHandler 1512
W0801 01:04:50.933411  6951 Analysis.cc:903] [20180801 01:04:50.933411]aaaaa InsertHandler 152
W0801 01:04:50.933420  6951 Analysis.cc:907] [20180801 01:04:50.933419]aaaaa InsertHandler 153
W0801 01:04:50.933423  6951 insert_handler.cc:56] [20180801 01:04:50.933423]aaaaa InsertHandler 200


W0801 01:05:07.269625  6951 insert_handler.cc:48] [20180801 01:05:07.269624]aaaaa InsertHandler 150
W0801 01:05:07.269629  6951 Analysis.cc:901] [20180801 01:05:07.269628]aaaaa InsertHandler 151
W0801 01:05:07.269634  6951 Analysis.cc:915] [20180801 01:05:07.269633]aaaaa InsertHandler 1510
W0801 01:05:07.269645  6951 Analysis.cc:927] [20180801 01:05:07.269644]aaaaa InsertHandler 1511
W0801 01:05:07.269651  6951 Analysis.cc:931] [20180801 01:05:07.269650]aaaaa InsertHandler 1512
W0801 01:05:07.269654  6951 Analysis.cc:903] [20180801 01:05:07.269653]aaaaa InsertHandler 152
W0801 01:05:07.269665  6951 Analysis.cc:907] [20180801 01:05:07.269663]aaaaa InsertHandler 153
W0801 01:05:07.269668  6951 insert_handler.cc:56] [20180801 01:05:07.269667]aaaaa InsertHandler 200


W0801 01:21:54.518466  7311 insert_handler.cc:48] [20180801 01:21:54.518465]aaaaa InsertHandler 150
W0801 01:21:54.518471  7311 Analysis.cc:901] [20180801 01:21:54.518469]aaaaa InsertHandler 151
W0801 01:21:54.518483  7311 Analysis.cc:903] [20180801 01:21:54.518482]aaaaa InsertHandler 152
W0801 01:21:54.518492  7311 Analysis.cc:907] [20180801 01:21:54.518492]aaaaa InsertHandler 153
W0801 01:21:54.518496  7311 insert_handler.cc:56] [20180801 01:21:54.518496]aaaaa InsertHandler 200


W0801 01:22:11.590464  7308 insert_handler.cc:48] [20180801 01:22:11.590464]aaaaa InsertHandler 150
W0801 01:22:11.590468  7308 Analysis.cc:901] [20180801 01:22:11.590467]aaaaa InsertHandler 151
W0801 01:22:11.590481  7308 Analysis.cc:903] [20180801 01:22:11.590480]aaaaa InsertHandler 152
W0801 01:22:11.590490  7308 Analysis.cc:907] [20180801 01:22:11.590489]aaaaa InsertHandler 153
W0801 01:22:11.590493  7308 insert_handler.cc:56] [20180801 01:22:11.590493]aaaaa InsertHandler 200


W0801 01:22:25.222702  7308 insert_handler.cc:48] [20180801 01:22:25.222701]aaaaa InsertHandler 150
W0801 01:22:25.222705  7308 Analysis.cc:901] [20180801 01:22:25.222705]aaaaa InsertHandler 151
W0801 01:22:25.222718  7308 Analysis.cc:903] [20180801 01:22:25.222718]aaaaa InsertHandler 152
W0801 01:22:25.222728  7308 Analysis.cc:907] [20180801 01:22:25.222727]aaaaa InsertHandler 153
W0801 01:22:25.222731  7308 insert_handler.cc:56] [20180801 01:22:25.222730]aaaaa InsertHandler 200


方法调用本身的消耗
map的消耗




############################################################################################################################
性能测试数据
1、
	create database flktest;
	use flktest;
	create table staff(id int, name enc varchar(64));
	insert into staff value(1,"Andy");
2、目前定位到，rewrite流程：
	任何一条sql请求，rewrite流程，都会执行两个查询，
	一个是	SELECT db FROM INFORMATION_SCHEMA.PROCESSLIST  WHERE id = 59; 根据连接线程，向mysql获取当前使用的数据库， 600多微秒
	另一个是 select stale from generic_prefix_staleness where cache_id=5; 从embedded_db查询，stale值，判断当前内存与embedded_db是否同步，200多微秒	
	I0724 05:30:57.035692 13388 rewrite_util.cc:838] [20180724 05:30:57.035680]---rewrite--- bbbbb retrieveDefaultDatabase 
	I0724 05:30:57.035710 13388 rewrite_util.cc:848] [20180724 05:30:57.035709]---rewrite--- bbbbb 111 
	I0724 05:30:57.036346 13388 rewrite_util.cc:851] [20180724 05:30:57.036342]---rewrite--- bbbbb 112 
	I0724 05:30:57.036366 13388 rewrite_util.cc:863] [20180724 05:30:57.036365]---rewrite--- bbbbb retrieveDefaultDatabase 
	【int Proxy::dorewrite】
	I0724 05:30:57.036384 13388 schema.cc:615] [20180724 05:30:57.036383]---rewrite--- bbbbb lowLevelGetCurrentStaleness 
	I0724 05:30:57.036751 13388 schema.cc:630] [20180724 05:30:57.036746]---rewrite--- bbbbb lowLevelGetCurrentStaleness
	【return shared.cache.getSchema(this->getConn(), this->getEConn());】
3、next流程
	I0725 03:52:51.331641  9159 Cryptdb_Proxy.cc:959] [20180725 03:52:51.331638]---next--- ccccc begin 
	I0725 03:52:51.332839  9159 Cryptdb_Proxy.cc:961] [20180725 03:52:51.332833]---next--- ccccc end 
	I0725 03:52:51.336182  9158 Cryptdb_Proxy.cc:959] [20180725 03:52:51.336173]---next--- ccccc begin 
	I0725 03:52:51.338012  9158 Cryptdb_Proxy.cc:961] [20180725 03:52:51.338004]---next--- ccccc end 
	【genericPreamble(nparams);】
4、什么时候，得到new query
	在哪里返回的？
	
	
5、Debug信息
	error.hh
	
create database tpcc; 
use tpcc;
create table t1(id int);
	
	
	


############################################################################################################################
对嵌入式MySQL执行SQL语句
1、set @cryptdb='run', @sql='use embedded_db';

shPath=$(cd $(dirname $0);pwd)
echo $shPath

############################################################################################################################
获取系统时间，精度微秒




############################################################################################################################
find ../ -iname "*.so" |xargs ls -thl


grep "O3" ./ -Rn



