#####################################################################################################################
测试udp打洞
1、正常使用场景是：主机A位于NAT_A后面，主机B位于NAT_B后面，NAT_A、NAT_B以及中介服务器S通过交换机在外网。
	A向B进行UDP连接，需要B向A方向，在NAT_B上打个洞，要求NAT_B是锥型NAT。
2、这个场景不好搭建，搭建一个更简单的场景进行测试。如下：
	主机A是192.168.1.160，udp绑定端口4444
	NAT_A是10.22.4.201 192.168.1.164 
	服务S是10.22.4.145，udp绑定端口6666
	从A[192.168.1.160:4444]去连接S[10.22.4.145:6666]没有问题，因为在NAT_A设置SNAT就好了。
	但是如果从S[10.22.4.145:6666]去连接A，怎么办呢？
	连接A的内网4444，显然不行。连接A的外网4444，因为没有在NAT_A设置端口映射，连接失败。
	为什么不在NAT_A对4444设置端口映射，因为往往不知道A的程序绑定端口，端口是变化的。
3、从S[10.22.4.145:6666]去连接A[10.22.4.201:4444]
	在A进行udp绑定，如下：
	[root@localhost ~]# nc -uv -l -p4444
	listening on [any] 4444 ...
	
	在S去连接A，如下：
	[niu_zibin@localhost sbin]$ nc -uv -p6666 10.22.4.201 4444
	10.22.4.201: inverse host lookup failed:  : No such file or directory
	(UNKNOWN) [10.22.4.201] 4444 (?) open
	open
	[niu_zibin@localhost sbin]$ 
	输入open直接报错
4、解决办法是先从A到S打个洞。
	在S进行udp绑定，如下：
	[niu_zibin@localhost sbin]$ nc -uv -l -p6666
	listening on [any] 6666 ...
	
	在A去连接S，如下：
	[root@localhost ~]# nc -uv -p4444 10.22.4.145 6666
	10.22.4.145: inverse host lookup failed:  : No such file or directory
	(UNKNOWN) [10.22.4.145] 6666 (?) open
	open
	
	hhh
	可以与S[10.22.4.145 6666]交互
	注意：在A看到的是A的内网到S的连接，在S看到的是S到A的外网连接，在NAT_A看不到连接。
5、现在关闭A的S的主动连接，之前A的绑定4444端口，可以与S进行交互了。如下：
	也就是说，A和S都有绑定udp端口，S去连接A失败，A向S打个洞（socket绑定相同的ip和port），
	这个时候S与这个洞可以交互，然后把这个洞关闭，S就可以与A的绑定端口交互了。
#####################################################################################################################
otl多线程设置和自动提交
1、多线程设置如下：
	otl_connect::otl_initialize(1);
	方法原型是：static int otl_initialize(const int threaded_mode=0)
2、自动提交设置如下：
	_dbConnect.rlogon(szConStr,1);
	方法原型是：void rlogon(const char* connect_str, const int aauto_commit=0) OTL_THROWS_OTL_EXCEPTION
#####################################################################################################################
看上去荒谬实际上科学的理论


#####################################################################################################################
看上去脑残实际上精妙的设计